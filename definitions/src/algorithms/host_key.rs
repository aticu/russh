//! Defines the `HostKeyAlgorithm` trait.

use std::{
    error::Error,
    fmt,
    ops::{Deref, DerefMut},
};

/// Describes a host key algorithm.
pub trait HostKeyAlgorithm {
    /// The name of the host key algorithm.
    const NAME: &'static str;

    /// The length of the signature generated by the `sign` operation.
    const SIGNATURE_LENGTH: usize;

    /// Whether the host key algorithm is encryption capable.
    const IS_ENCRYPTION_CAPABLE: bool;

    /// Whether the host key algorithm is signature capable.
    const IS_SIGNATURE_CAPABLE: bool;

    /// Loads the given keypair into the key exchange algorithm.
    ///
    /// The encoding of the keypair is algorithm specific.
    ///
    /// # Panics
    /// This function may panic if a key was already loaded.
    fn load_keypair(&mut self, keypair: &[u8]) -> Result<(), Box<dyn Error>>;

    /// Returns the public key that was previously loaded using `load_keypair`.
    ///
    /// # Panics
    /// This function may panic if `load_keypair` was not previously called.
    fn public_key(&self) -> &[u8];

    /// Signs the given message with the stored private key.
    ///
    /// The signature should be written to `signature`.
    ///
    /// # Panics
    /// This function may panic if
    /// - `load_keypair` was not previously called
    /// - `signature.len()` is not equal to `self.signature_length()`
    fn sign(&self, message: &[u8], signature: &mut [u8]);

    /// Checks if `signature` is of `message` and by `public_key`s private key.
    ///
    /// The encoding of the public key is algorithm specific. If the encoding is
    /// incorrect, this method must return false.
    ///
    /// # Note
    /// This method does *not* need `load_keypair` to be invoked previously and
    /// *may not* require it.
    fn verify(&self, message: &[u8], signature: &[u8], public_key: &[u8]) -> bool;
}

/// A runtime description of a host key algorithm.
///
/// This allows representing different host key algorithms with the same type.
///
/// It is mostly intended for internal use.
pub struct HostKeyAlgorithmEntry {
    /// The name of the host key algorithm.
    pub name: &'static str,
    /// The length of the signature generated by the `sign` operation.
    pub signature_length: usize,
    /// Whether the host key algorithm is encryption capable.
    pub is_encryption_capable: bool,
    /// Whether the host key algorithm is signature capable.
    pub is_signature_capable: bool,
    /// The algorithm itself.
    #[doc(hidden)]
    algorithm: Box<dyn DynHostKeyAlgorithm>,
}

impl fmt::Debug for HostKeyAlgorithmEntry {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.debug_struct("HostKeyAlgorithmEntry")
            .field("name", &self.name)
            .field("signature_length", &self.signature_length)
            .field("is_encryption_capable", &self.is_encryption_capable)
            .field("is_signature_capable", &self.is_signature_capable)
            .finish_non_exhaustive()
    }
}

impl<T> From<T> for HostKeyAlgorithmEntry
where
    T: HostKeyAlgorithm + 'static,
{
    fn from(alg: T) -> Self {
        HostKeyAlgorithmEntry {
            name: <T as HostKeyAlgorithm>::NAME,
            signature_length: <T as HostKeyAlgorithm>::SIGNATURE_LENGTH,
            is_encryption_capable: <T as HostKeyAlgorithm>::IS_ENCRYPTION_CAPABLE,
            is_signature_capable: <T as HostKeyAlgorithm>::IS_SIGNATURE_CAPABLE,
            algorithm: Box::new(alg),
        }
    }
}

impl Deref for HostKeyAlgorithmEntry {
    type Target = dyn DynHostKeyAlgorithm;

    fn deref(&self) -> &Self::Target {
        &*self.algorithm
    }
}

impl DerefMut for HostKeyAlgorithmEntry {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut *self.algorithm
    }
}

/// A trait object friendly version of the [`HostKeyAlgorithm`] trait.
///
/// **DO NOT IMPLEMENT THIS TRAIT MANUALLY.**
/// Implement the [`HostKeyAlgorithm`] trait instead.
///
/// This trait is mainly intended for internal use and automatically implemented for all types
/// implementing the [`HostKeyAlgorithm`] trait.
pub trait DynHostKeyAlgorithm {
    /// See [`HostKeyAlgorithm::load_keypair`].
    fn load_keypair(&mut self, keypair: &[u8]) -> Result<(), Box<dyn Error>>;

    /// See [`HostKeyAlgorithm::public_key`].
    fn public_key(&self) -> &[u8];

    /// See [`HostKeyAlgorithm::sign`].
    fn sign(&self, message: &[u8], signature: &mut [u8]);

    /// See [`HostKeyAlgorithm::verify`].
    fn verify(&self, message: &[u8], signature: &[u8], public_key: &[u8]) -> bool;
}

impl<T> DynHostKeyAlgorithm for T
where
    T: HostKeyAlgorithm,
{
    fn load_keypair(&mut self, keypair: &[u8]) -> Result<(), Box<dyn Error>> {
        <Self as HostKeyAlgorithm>::load_keypair(self, keypair)
    }

    fn public_key(&self) -> &[u8] {
        <Self as HostKeyAlgorithm>::public_key(self)
    }

    fn sign(&self, message: &[u8], signature: &mut [u8]) {
        <Self as HostKeyAlgorithm>::sign(self, message, signature)
    }

    fn verify(&self, message: &[u8], signature: &[u8], public_key: &[u8]) -> bool {
        <Self as HostKeyAlgorithm>::verify(self, message, signature, public_key)
    }
}
